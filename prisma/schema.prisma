// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ----------------------------- User Model
model User {
  id            String       @id @default(uuid())
  user_code     String       @unique
  fullname      String
  username      String       @unique
  email         String       @unique
  phone         String?      @unique
  password      String
  profile_image String?
  role          Role         @default(CUSTOMER)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  loan          Loan[]
  punishment    Punishment[]
}

enum Role {
  CUSTOMER
  ADMIN
}

// -----------------------------  Book Category Model
model BookCategory {
  id            String   @id @default(uuid())
  category_code String   @unique
  category_name String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  book          Book[]
}

// -----------------------------  Book Author Model
model BookAuthor {
  id          String   @id @default(uuid())
  author_code String   @unique
  author_name String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  book        Book[]
}

// -----------------------------  Book Publisher Model
model BookPublisher {
  id             String   @id @default(uuid())
  publisher_code String   @unique
  publisher_name String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  book           Book[]
}

// -----------------------------  Book Model
model Book {
  id                String         @id @default(uuid())
  book_code         String         @unique
  book_name         String
  book_category_id  String?
  book_author_id    String?
  book_publisher_id String?
  book_cover        String?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  loan              Loan[]
  book_publisher    BookPublisher? @relation(fields: [book_publisher_id], references: [id])
  book_author       BookAuthor?    @relation(fields: [book_author_id], references: [id])
  book_category     BookCategory?  @relation(fields: [book_category_id], references: [id])

  @@fulltext([book_name])
}

// -----------------------------  Loan Model
model Loan {
  id            String       @id @default(uuid())
  loan_code     String       @unique
  user_id       String
  book_id       String
  loan_date     DateTime
  loan_duration Int
  status        LoanStatus
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  user          User         @relation(fields: [user_id], references: [id])
  book          Book         @relation(fields: [book_id], references: [id])
  book_return   BookReturn[]
}

enum LoanStatus {
  ISSUED
  RETURNED
}

// -----------------------------  BookReturn Model
model BookReturn {
  id          String   @id @default(uuid())
  loan_id     String
  return_code String   @unique
  return_date DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  loan        Loan     @relation(fields: [loan_id], references: [id])
}

// -----------------------------  Punishment Model
model Punishment {
  id              String        @id @default(uuid())
  punishment_code String        @unique
  penalty_fee     Float
  start_date      DateTime
  end_date        DateTime
  penalty_reason  String
  penalty_status  PenaltyStatus
  user_id         String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  user            User          @relation(fields: [user_id], references: [id])
}

enum PenaltyStatus {
  INCOMPLETE
  COMPLETE
}
